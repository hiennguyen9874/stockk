version: "3.3"

services:
  proxy:
    image: traefik:v2.5
    ports:
      - ${APP_PORT}:80
      # - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-public
    command:
      # - --log.level=DEBUG
      # Traefik will listen on port 8080 by default for API request.
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.${COMPOSE_PROJECT_NAME}_http.address=:80
    labels:
      - traefik.enable=true
      # Defines a default docker network to use for connections to all containers.
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_proxy.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_proxy.loadbalancer.server.port=80
    restart: unless-stopped

  db:
    image: postgres:14.0-alpine
    volumes:
      - app-db-data:/var/lib/postgresql/data/
    networks:
      - back
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    expose:
      - 5432
    restart: unless-stopped

  backend:
    build:
      context: backend
      dockerfile: fastapi.dockerfile
    command: sh -c "wait-for-it.sh redis:6379 && wait-for-it.sh db:5432 -- bash /start-reload.sh"
    networks:
      - back
      - traefik-public
    env_file:
      - ${COMPOSE_ENV_FILE}
    volumes:
      - ./backend/app:/app
      - app-media-data:/app/media
    expose:
      - 80
    depends_on:
      - db
    labels:
      - traefik.enable=true
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_backend.rule=PathPrefix(`${PREFIX}/api`) || PathPrefix(`${PREFIX}/docs`) || PathPrefix(`${PREFIX}/redoc`) || PathPrefix(`${PREFIX}/openapi.json`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_backend.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_backend.loadbalancer.server.port=80
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.9.8-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    networks:
      - back
    expose:
      - 5672
      - 15672
    restart: unless-stopped

  redis:
    image: redis:6.2.6-alpine
    networks:
      - back
    expose:
      - 6379
    restart: unless-stopped

  celery:
    build:
      context: backend
      dockerfile: worker.dockerfile
    command: sh -c "wait-for-it.sh rabbitmq:5672 && wait-for-it.sh redis:6379 && wait-for-it.sh db:5432 -- sleep 5; bash /worker-start.sh"
    depends_on:
      - db
      - rabbitmq
      - redis
      - backend
    volumes:
      - ./backend/app:/app
      - app-media-data:/app/media
    networks:
      - back
    env_file:
      - ${COMPOSE_ENV_FILE}
    restart: unless-stopped

  celery_beat:
    build:
      context: backend
      dockerfile: worker.dockerfile
    command: sh -c "wait-for-it.sh rabbitmq:5672 && wait-for-it.sh redis:6379 && wait-for-it.sh db:5432 -- sleep 5; bash /worker-beat-start.sh"
    depends_on:
      - db
      - rabbitmq
      - redis
      - backend
    volumes:
      - ./backend/app:/app
      - app-media-data:/app/media
    networks:
      - back
    env_file:
      - ${COMPOSE_ENV_FILE}
    restart: unless-stopped

  # flower:
  #   image: mher/flower
  #   command: celery flower --url_prefix=flower --broker_api=http://admin:mypass@rabbitmq:15672/api/
  #   environment:
  #     - CELERY_BROKER_URL=amqp://admin:mypass@rabbitmq:5672/
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/
  #     # - FLOWER_BASIC_AUTH=admin:admin_flower # auth will not working with prometheus
  #     - FLOWER_PORT=5555
  #   networks:
  #     - back
  #     - visualize
  #     - traefik-public
  #   expose:
  #     - 5555
  #   depends_on:
  #     - rabbitmq
  #     - celery
  #     - redis
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_flower.rule=PathPrefix(`/flower`)
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_flower.entrypoints=${COMPOSE_PROJECT_NAME}_http
  #     - traefik.http.services.${COMPOSE_PROJECT_NAME}_flower.loadbalancer.server.port=5555
  #   restart: unless-stopped

  # # https://flower.readthedocs.io/en/latest/prometheus-integration.html#celery-flower-prometheus-grafana-integration-guide
  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   expose:
  #     - 9090
  #   networks:
  #     - visualize
  #   depends_on:
  #     - flower

  # grafana:
  #   image: grafana/grafana
  #   environment:
  #     - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana
  #     - GF_SERVER_SERVE_FROM_SUB_PATH=true
  #   depends_on:
  #     - prometheus
  #   expose:
  #     - 3000
  #   networks:
  #     - visualize
  #     - traefik-public
  #   volumes:
  #     - app-grafana-storage:/var/lib/grafana
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_grafana.rule=PathPrefix(`/grafana`)
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_grafana.entrypoints=${COMPOSE_PROJECT_NAME}_http
  #     - traefik.http.services.${COMPOSE_PROJECT_NAME}_grafana.loadbalancer.server.port=3000

  # pgadmin:
  #   image: dpage/pgadmin4
  #   networks:
  #     - traefik-public
  #     - back
  #   depends_on:
  #     - db
  #   expose:
  #     - 5050
  #   environment:
  #     - PGADMIN_LISTEN_PORT=5050
  #     - PGADMIN_DEFAULT_EMAIL=admin@gmail.com
  #     - PGADMIN_DEFAULT_PASSWORD=admin
  #     - SCRIPT_NAME=${PREFIX}/pgadmin
  #   volumes:
  #     - app-pgadmin-data:/var/lib/pgadmin
  #   labels:
  #     - traefik.enable=true
  #     - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_pgadmin.rule=PathPrefix(`${PREFIX}/pgadmin`)
  #     # - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_pgadmin.stripprefix.prefixes=/pgadmin
  #     # - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_pgadmin.stripprefix.forceslash=false
  #     - traefik.http.routers.${COMPOSE_PROJECT_NAME}_pgadmin.entrypoints=${COMPOSE_PROJECT_NAME}_http
  #     - traefik.http.services.${COMPOSE_PROJECT_NAME}_pgadmin.loadbalancer.server.port=5050
  #   restart: unless-stopped

  nginx:
    image: nginx:1.21.6-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - app-media-data:/usr/src/app/media
    expose:
      - 80
    networks:
      - traefik-public
    labels:
      - traefik.enable=true
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik-public
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.rule=PathPrefix(`${PREFIX}/media`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nginx.middlewares=${COMPOSE_PROJECT_NAME}_nginx
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_nginx.loadbalancer.server.port=80
      - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_nginx.stripprefix.prefixes=${PREFIX}
      # - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_nginx.stripprefix.forceSlash=true
    restart: unless-stopped

  influxdb:
    image: influxdb:1.8.10-alpine
    expose:
      - 8086
    networks:
      - back
    volumes:
      - app-influxdb-data:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=${INFLUXDB_DB}
      - INFLUXDB_ADMIN_USER=${INFLUXDB_USERNAME}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}

  chronograf:
    image: chronograf:1.7.17-alpine
    ports:
      - '127.0.0.1:8888:8888'
    expose:
      - 8888
    networks:
      - back
    volumes:
      - app-chronograf-data:/var/lib/chronograf
    depends_on:
      - influxdb
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_USERNAME=${INFLUXDB_USERNAME}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}

networks:
  back:
  traefik-public:


volumes:
  app-db-data:
  app-media-data: # app-pgadmin-data:
  app-influxdb-data:
  app-chronograf-data:
